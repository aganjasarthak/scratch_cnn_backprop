x1 = rand(17, 17, 3); % 3 channels
x2 = rand(17, 17, 3); %3 chanels


for iterr = 1:2
    for batchi = 1:batch_val
     
        if batchi == 1
            x = x1;
        else
            x = x2;
        end

        
        conv_oprelu = cell(number_ker, num_channels);

        for kerindex = 1:number_ker
            for channel = 1:num_channels
                
                conv_op = conv2(x(:, :, channel), squeeze(k1(kerindex, :, :, channel)), 'valid');
           
                conv_oprelu{kerindex, channel} = max(0, conv_op);
            end
        end

      
        max_indices{batchi} = cell(number_ker, num_channels);
        for kerindex = 1:number_ker
            for channel = 1:num_channels
                [m, n] = size(conv_oprelu{kerindex, channel});
                pooled_matrix{kerindex, channel} = zeros(floor(m / 2), floor(n / 2));
                max_indices{batchi}{kerindex, channel} = zeros(floor(m / 2), floor(n / 2), 2);

                for i = 1:2:m-1
                    for j = 1:2:n-1
                        block = conv_oprelu{kerindex, channel}(i:i+1, j:j+1);
                        max_value = max(block(:));
                        pooled_matrix{kerindex, channel}(ceil(i/2), ceil(j/2)) = max_value;

                        
                        [row_idx, col_idx] = find(block == max_value);
                        max_indices{batchi}{kerindex, channel}(ceil(i/2), ceil(j/2), :) = [i + row_idx(1) - 1, j + col_idx(1) - 1];
                    end
                end
            end
        end
        
            flatten_output = [];
            for kerindex = 1:number_ker
                for channel = 1:num_channels
                    flattt = pooled_matrix{kerindex, channel}(:);
                    flatten_output = [flatten_output; flattt]; 
                end
            end

     
        if iterr == 1 && batchi == 1
            [rowssss, colsss] = size(flatten_output');
            weight_ini = zeros(colsss, 1);
            x_new = zeros(batch_val, colsss);
            X_dontchange = zeros(batch_val, colsss);
            bias=11;
        end

        x_new(batchi, :) = flatten_output';
%         X_dontchange(batchi, :) = flatten_output';

        logit = sum(flatten_output .* weight_ini) + bias;
        sig(batchi) = 1 / (1 + exp(-logit));
    
    end
    
    
       loss_grad = sig - y_true;
      for newrun = 1:size(flatten_output, 1)
        mult = sum(loss_grad .* x_new(:, newrun));
        mult_avg = mult / batch_val;

        
        grad = mult_avg + 0.01 / batch_val * weight_ini(newrun);
        weight_ini(newrun) = weight_ini(newrun) - grad;

   
        bias_grad = sum(loss_grad) / batch_val;
        bias = bias - 0.01 * bias_grad;
      end
    
       for batchi = 1:batch_val
        logit_update = sum(X_dontchange(batchi, :)' .* weight_ini) + bias;
        y_pred_second(batchi) = 1 / (1 + exp(-logit_update));
        loss_grad(batchi, 1) = y_pred_second(batchi) - y_true(batchi, 1);
       end
    
        [fr, fc] = size(flatten_output);
    num = fr / (number_ker * num_channels); 
    start = 1;
    diff = num - 1;

    for index = 1:number_ker
        for channel = 1:num_channels
            sumt = 0;
            for neewbat = 1:batch_val
                endx = start + diff;
                mult1 = loss_grad(neewbat, 1) * weight_ini(start:endx)';
                [inirpool, inicpool] = size(pooled_matrix{index, channel});
                back_pool = reshape(mult1, inirpool, inicpool);
                
                parent_matrix = zeros(size(conv_oprelu{index, channel}, 1), size(conv_oprelu{index, channel}, 2));
                for i = 1:size(back_pool, 1)
                    for j = 1:size(back_pool, 2)
                        original_indices = max_indices{neewbat}{index, channel}(i, j, :);
                        original_row = original_indices(1);
                        original_col = original_indices(2);
                        parent_matrix(original_row, original_col) = back_pool(i, j);
                    end
                end
                             onesmat = double(parent_matrix > 0);
                    mult2 = onesmat .* parent_matrix;

                 
                    if neewbat == 1
                        x = x1;
                    else
                        x = x2;
                    end

               
                    for channel = 1:num_channels
                        kernel_grad(:, :, channel) = conv2(x(:, :, channel), mult2, 'valid');
                    end
                    sumt = sumt + kernel_grad;
                
            end
        end
    end
    
end
